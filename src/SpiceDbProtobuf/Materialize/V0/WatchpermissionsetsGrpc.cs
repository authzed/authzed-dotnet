// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: authzed/api/materialize/v0/watchpermissionsets.proto
// </auto-generated>
#pragma warning disable 0414, 1591, 8981, 0612
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Authzed.Api.Materialize.V0 {
  public static partial class WatchPermissionSetsService
  {
    static readonly string __ServiceName = "authzed.api.materialize.v0.WatchPermissionSetsService";

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static void __Helper_SerializeMessage(global::Google.Protobuf.IMessage message, grpc::SerializationContext context)
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (message is global::Google.Protobuf.IBufferMessage)
      {
        context.SetPayloadLength(message.CalculateSize());
        global::Google.Protobuf.MessageExtensions.WriteTo(message, context.GetBufferWriter());
        context.Complete();
        return;
      }
      #endif
      context.Complete(global::Google.Protobuf.MessageExtensions.ToByteArray(message));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static class __Helper_MessageCache<T>
    {
      public static readonly bool IsBufferMessage = global::System.Reflection.IntrospectionExtensions.GetTypeInfo(typeof(global::Google.Protobuf.IBufferMessage)).IsAssignableFrom(typeof(T));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static T __Helper_DeserializeMessage<T>(grpc::DeserializationContext context, global::Google.Protobuf.MessageParser<T> parser) where T : global::Google.Protobuf.IMessage<T>
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (__Helper_MessageCache<T>.IsBufferMessage)
      {
        return parser.ParseFrom(context.PayloadAsReadOnlySequence());
      }
      #endif
      return parser.ParseFrom(context.PayloadAsNewBuffer());
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Authzed.Api.Materialize.V0.WatchPermissionSetsRequest> __Marshaller_authzed_api_materialize_v0_WatchPermissionSetsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Authzed.Api.Materialize.V0.WatchPermissionSetsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Authzed.Api.Materialize.V0.WatchPermissionSetsResponse> __Marshaller_authzed_api_materialize_v0_WatchPermissionSetsResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Authzed.Api.Materialize.V0.WatchPermissionSetsResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Authzed.Api.Materialize.V0.LookupPermissionSetsRequest> __Marshaller_authzed_api_materialize_v0_LookupPermissionSetsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Authzed.Api.Materialize.V0.LookupPermissionSetsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Authzed.Api.Materialize.V0.LookupPermissionSetsResponse> __Marshaller_authzed_api_materialize_v0_LookupPermissionSetsResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Authzed.Api.Materialize.V0.LookupPermissionSetsResponse.Parser));

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Authzed.Api.Materialize.V0.WatchPermissionSetsRequest, global::Authzed.Api.Materialize.V0.WatchPermissionSetsResponse> __Method_WatchPermissionSets = new grpc::Method<global::Authzed.Api.Materialize.V0.WatchPermissionSetsRequest, global::Authzed.Api.Materialize.V0.WatchPermissionSetsResponse>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "WatchPermissionSets",
        __Marshaller_authzed_api_materialize_v0_WatchPermissionSetsRequest,
        __Marshaller_authzed_api_materialize_v0_WatchPermissionSetsResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Authzed.Api.Materialize.V0.LookupPermissionSetsRequest, global::Authzed.Api.Materialize.V0.LookupPermissionSetsResponse> __Method_LookupPermissionSets = new grpc::Method<global::Authzed.Api.Materialize.V0.LookupPermissionSetsRequest, global::Authzed.Api.Materialize.V0.LookupPermissionSetsResponse>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "LookupPermissionSets",
        __Marshaller_authzed_api_materialize_v0_LookupPermissionSetsRequest,
        __Marshaller_authzed_api_materialize_v0_LookupPermissionSetsResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Authzed.Api.Materialize.V0.WatchpermissionsetsReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of WatchPermissionSetsService</summary>
    [grpc::BindServiceMethod(typeof(WatchPermissionSetsService), "BindService")]
    public abstract partial class WatchPermissionSetsServiceBase
    {
      /// <summary>
      /// WatchPermissionSets returns a stream of changes to the sets which can be used to compute the watched permissions.
      ///
      /// WatchPermissionSets lets consumers achieve the same thing as WatchPermissions, but trades off a simpler usage model with
      /// significantly lower computational requirements. Unlike WatchPermissions, this method returns changes to the sets of permissions,
      /// rather than the individual permissions. Permission sets are a normalized form of the computed permissions, which
      /// means that the consumer must perform an extra computation over this representation to obtain the final computed
      /// permissions, typically by intersecting the provided sets.
      ///
      /// For example, this would look like a JOIN between the
      /// materialize permission sets table in a target relation database, the table with the resources to authorize access
      /// to, and the table with the subject (e.g. a user).
      ///
      /// In exchange, the number of changes issued by WatchPermissionSets will be several orders of magnitude less than those
      /// emitted by WatchPermissions, which has several implications:
      /// - significantly less resources to compute the sets
      /// - significantly less messages to stream over the network
      /// - significantly less events to ingest on the consumer side
      /// - less ingestion lag from the origin SpiceDB mutation
      ///
      /// The type of scenarios WatchPermissionSets is particularly well suited is when a single change
      /// in the origin SpiceDB can yield millions of changes. For example, in the GitHub authorization model, assigning a role
      /// to a top-level team of an organization with hundreds of thousands of employees can lead to an explosion of
      /// permission change events that would require a lot of computational resources to process, both on Materialize and
      /// the consumer side.
      ///
      /// WatchPermissionSets is thus recommended for any larger scale use case where the fan-out in permission changes that
      /// emerges from a specific schema and data shape is too large to handle effectively.
      ///
      /// The API does not offer a sharding mechanism and thus there should only be one consumer per target system.
      /// Implementing an active-active HA consumer setup over the same target system will require coordinating which
      /// revisions have been consumed in order to prevent transitioning to an inconsistent state.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="responseStream">Used for sending responses back to the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>A task indicating completion of the handler.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task WatchPermissionSets(global::Authzed.Api.Materialize.V0.WatchPermissionSetsRequest request, grpc::IServerStreamWriter<global::Authzed.Api.Materialize.V0.WatchPermissionSetsResponse> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// LookupPermissionSets returns the current state of the permission sets which can be used to derive the computed permissions.
      /// It's typically used to backfill the state of the permission sets in the consumer side.
      ///
      /// It's a cursored API and the consumer is responsible to keep track of the cursor and use it on each subsequent call.
      /// Each stream will return &lt;N> permission sets defined by the specified request limit. The server will keep streaming until
      /// the sets per stream is hit, or the current state of the sets is reached,
      /// whatever happens first, and then close the stream. The server will indicate there are no more changes to stream
      /// through the `completed_members` in the cursor.
      ///
      /// There may be many elements to stream, and so the consumer should be prepared to resume the stream from the last
      /// cursor received. Once completed, the consumer may start streaming permission set changes using WatchPermissionSets
      /// and the revision token from the last LookupPermissionSets response.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="responseStream">Used for sending responses back to the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>A task indicating completion of the handler.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task LookupPermissionSets(global::Authzed.Api.Materialize.V0.LookupPermissionSetsRequest request, grpc::IServerStreamWriter<global::Authzed.Api.Materialize.V0.LookupPermissionSetsResponse> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for WatchPermissionSetsService</summary>
    public partial class WatchPermissionSetsServiceClient : grpc::ClientBase<WatchPermissionSetsServiceClient>
    {
      /// <summary>Creates a new client for WatchPermissionSetsService</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public WatchPermissionSetsServiceClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for WatchPermissionSetsService that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public WatchPermissionSetsServiceClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected WatchPermissionSetsServiceClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected WatchPermissionSetsServiceClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// WatchPermissionSets returns a stream of changes to the sets which can be used to compute the watched permissions.
      ///
      /// WatchPermissionSets lets consumers achieve the same thing as WatchPermissions, but trades off a simpler usage model with
      /// significantly lower computational requirements. Unlike WatchPermissions, this method returns changes to the sets of permissions,
      /// rather than the individual permissions. Permission sets are a normalized form of the computed permissions, which
      /// means that the consumer must perform an extra computation over this representation to obtain the final computed
      /// permissions, typically by intersecting the provided sets.
      ///
      /// For example, this would look like a JOIN between the
      /// materialize permission sets table in a target relation database, the table with the resources to authorize access
      /// to, and the table with the subject (e.g. a user).
      ///
      /// In exchange, the number of changes issued by WatchPermissionSets will be several orders of magnitude less than those
      /// emitted by WatchPermissions, which has several implications:
      /// - significantly less resources to compute the sets
      /// - significantly less messages to stream over the network
      /// - significantly less events to ingest on the consumer side
      /// - less ingestion lag from the origin SpiceDB mutation
      ///
      /// The type of scenarios WatchPermissionSets is particularly well suited is when a single change
      /// in the origin SpiceDB can yield millions of changes. For example, in the GitHub authorization model, assigning a role
      /// to a top-level team of an organization with hundreds of thousands of employees can lead to an explosion of
      /// permission change events that would require a lot of computational resources to process, both on Materialize and
      /// the consumer side.
      ///
      /// WatchPermissionSets is thus recommended for any larger scale use case where the fan-out in permission changes that
      /// emerges from a specific schema and data shape is too large to handle effectively.
      ///
      /// The API does not offer a sharding mechanism and thus there should only be one consumer per target system.
      /// Implementing an active-active HA consumer setup over the same target system will require coordinating which
      /// revisions have been consumed in order to prevent transitioning to an inconsistent state.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncServerStreamingCall<global::Authzed.Api.Materialize.V0.WatchPermissionSetsResponse> WatchPermissionSets(global::Authzed.Api.Materialize.V0.WatchPermissionSetsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return WatchPermissionSets(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// WatchPermissionSets returns a stream of changes to the sets which can be used to compute the watched permissions.
      ///
      /// WatchPermissionSets lets consumers achieve the same thing as WatchPermissions, but trades off a simpler usage model with
      /// significantly lower computational requirements. Unlike WatchPermissions, this method returns changes to the sets of permissions,
      /// rather than the individual permissions. Permission sets are a normalized form of the computed permissions, which
      /// means that the consumer must perform an extra computation over this representation to obtain the final computed
      /// permissions, typically by intersecting the provided sets.
      ///
      /// For example, this would look like a JOIN between the
      /// materialize permission sets table in a target relation database, the table with the resources to authorize access
      /// to, and the table with the subject (e.g. a user).
      ///
      /// In exchange, the number of changes issued by WatchPermissionSets will be several orders of magnitude less than those
      /// emitted by WatchPermissions, which has several implications:
      /// - significantly less resources to compute the sets
      /// - significantly less messages to stream over the network
      /// - significantly less events to ingest on the consumer side
      /// - less ingestion lag from the origin SpiceDB mutation
      ///
      /// The type of scenarios WatchPermissionSets is particularly well suited is when a single change
      /// in the origin SpiceDB can yield millions of changes. For example, in the GitHub authorization model, assigning a role
      /// to a top-level team of an organization with hundreds of thousands of employees can lead to an explosion of
      /// permission change events that would require a lot of computational resources to process, both on Materialize and
      /// the consumer side.
      ///
      /// WatchPermissionSets is thus recommended for any larger scale use case where the fan-out in permission changes that
      /// emerges from a specific schema and data shape is too large to handle effectively.
      ///
      /// The API does not offer a sharding mechanism and thus there should only be one consumer per target system.
      /// Implementing an active-active HA consumer setup over the same target system will require coordinating which
      /// revisions have been consumed in order to prevent transitioning to an inconsistent state.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncServerStreamingCall<global::Authzed.Api.Materialize.V0.WatchPermissionSetsResponse> WatchPermissionSets(global::Authzed.Api.Materialize.V0.WatchPermissionSetsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_WatchPermissionSets, null, options, request);
      }
      /// <summary>
      /// LookupPermissionSets returns the current state of the permission sets which can be used to derive the computed permissions.
      /// It's typically used to backfill the state of the permission sets in the consumer side.
      ///
      /// It's a cursored API and the consumer is responsible to keep track of the cursor and use it on each subsequent call.
      /// Each stream will return &lt;N> permission sets defined by the specified request limit. The server will keep streaming until
      /// the sets per stream is hit, or the current state of the sets is reached,
      /// whatever happens first, and then close the stream. The server will indicate there are no more changes to stream
      /// through the `completed_members` in the cursor.
      ///
      /// There may be many elements to stream, and so the consumer should be prepared to resume the stream from the last
      /// cursor received. Once completed, the consumer may start streaming permission set changes using WatchPermissionSets
      /// and the revision token from the last LookupPermissionSets response.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncServerStreamingCall<global::Authzed.Api.Materialize.V0.LookupPermissionSetsResponse> LookupPermissionSets(global::Authzed.Api.Materialize.V0.LookupPermissionSetsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return LookupPermissionSets(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// LookupPermissionSets returns the current state of the permission sets which can be used to derive the computed permissions.
      /// It's typically used to backfill the state of the permission sets in the consumer side.
      ///
      /// It's a cursored API and the consumer is responsible to keep track of the cursor and use it on each subsequent call.
      /// Each stream will return &lt;N> permission sets defined by the specified request limit. The server will keep streaming until
      /// the sets per stream is hit, or the current state of the sets is reached,
      /// whatever happens first, and then close the stream. The server will indicate there are no more changes to stream
      /// through the `completed_members` in the cursor.
      ///
      /// There may be many elements to stream, and so the consumer should be prepared to resume the stream from the last
      /// cursor received. Once completed, the consumer may start streaming permission set changes using WatchPermissionSets
      /// and the revision token from the last LookupPermissionSets response.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncServerStreamingCall<global::Authzed.Api.Materialize.V0.LookupPermissionSetsResponse> LookupPermissionSets(global::Authzed.Api.Materialize.V0.LookupPermissionSetsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_LookupPermissionSets, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected override WatchPermissionSetsServiceClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new WatchPermissionSetsServiceClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static grpc::ServerServiceDefinition BindService(WatchPermissionSetsServiceBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_WatchPermissionSets, serviceImpl.WatchPermissionSets)
          .AddMethod(__Method_LookupPermissionSets, serviceImpl.LookupPermissionSets).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static void BindService(grpc::ServiceBinderBase serviceBinder, WatchPermissionSetsServiceBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_WatchPermissionSets, serviceImpl == null ? null : new grpc::ServerStreamingServerMethod<global::Authzed.Api.Materialize.V0.WatchPermissionSetsRequest, global::Authzed.Api.Materialize.V0.WatchPermissionSetsResponse>(serviceImpl.WatchPermissionSets));
      serviceBinder.AddMethod(__Method_LookupPermissionSets, serviceImpl == null ? null : new grpc::ServerStreamingServerMethod<global::Authzed.Api.Materialize.V0.LookupPermissionSetsRequest, global::Authzed.Api.Materialize.V0.LookupPermissionSetsResponse>(serviceImpl.LookupPermissionSets));
    }

  }
}
#endregion
