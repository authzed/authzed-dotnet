// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: authzed/api/v1/experimental_service.proto
// </auto-generated>
#pragma warning disable 0414, 1591, 8981, 0612
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Authzed.Api.V1 {
  /// <summary>
  /// ExperimentalService exposes a number of APIs that are currently being
  /// prototyped and tested for future inclusion in the stable API.
  /// </summary>
  public static partial class ExperimentalService
  {
    static readonly string __ServiceName = "authzed.api.v1.ExperimentalService";

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static void __Helper_SerializeMessage(global::Google.Protobuf.IMessage message, grpc::SerializationContext context)
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (message is global::Google.Protobuf.IBufferMessage)
      {
        context.SetPayloadLength(message.CalculateSize());
        global::Google.Protobuf.MessageExtensions.WriteTo(message, context.GetBufferWriter());
        context.Complete();
        return;
      }
      #endif
      context.Complete(global::Google.Protobuf.MessageExtensions.ToByteArray(message));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static class __Helper_MessageCache<T>
    {
      public static readonly bool IsBufferMessage = global::System.Reflection.IntrospectionExtensions.GetTypeInfo(typeof(global::Google.Protobuf.IBufferMessage)).IsAssignableFrom(typeof(T));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static T __Helper_DeserializeMessage<T>(grpc::DeserializationContext context, global::Google.Protobuf.MessageParser<T> parser) where T : global::Google.Protobuf.IMessage<T>
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (__Helper_MessageCache<T>.IsBufferMessage)
      {
        return parser.ParseFrom(context.PayloadAsReadOnlySequence());
      }
      #endif
      return parser.ParseFrom(context.PayloadAsNewBuffer());
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Authzed.Api.V1.BulkImportRelationshipsRequest> __Marshaller_authzed_api_v1_BulkImportRelationshipsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Authzed.Api.V1.BulkImportRelationshipsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Authzed.Api.V1.BulkImportRelationshipsResponse> __Marshaller_authzed_api_v1_BulkImportRelationshipsResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Authzed.Api.V1.BulkImportRelationshipsResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Authzed.Api.V1.BulkExportRelationshipsRequest> __Marshaller_authzed_api_v1_BulkExportRelationshipsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Authzed.Api.V1.BulkExportRelationshipsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Authzed.Api.V1.BulkExportRelationshipsResponse> __Marshaller_authzed_api_v1_BulkExportRelationshipsResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Authzed.Api.V1.BulkExportRelationshipsResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Authzed.Api.V1.BulkCheckPermissionRequest> __Marshaller_authzed_api_v1_BulkCheckPermissionRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Authzed.Api.V1.BulkCheckPermissionRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Authzed.Api.V1.BulkCheckPermissionResponse> __Marshaller_authzed_api_v1_BulkCheckPermissionResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Authzed.Api.V1.BulkCheckPermissionResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Authzed.Api.V1.ExperimentalReflectSchemaRequest> __Marshaller_authzed_api_v1_ExperimentalReflectSchemaRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Authzed.Api.V1.ExperimentalReflectSchemaRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Authzed.Api.V1.ExperimentalReflectSchemaResponse> __Marshaller_authzed_api_v1_ExperimentalReflectSchemaResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Authzed.Api.V1.ExperimentalReflectSchemaResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Authzed.Api.V1.ExperimentalComputablePermissionsRequest> __Marshaller_authzed_api_v1_ExperimentalComputablePermissionsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Authzed.Api.V1.ExperimentalComputablePermissionsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Authzed.Api.V1.ExperimentalComputablePermissionsResponse> __Marshaller_authzed_api_v1_ExperimentalComputablePermissionsResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Authzed.Api.V1.ExperimentalComputablePermissionsResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Authzed.Api.V1.ExperimentalDependentRelationsRequest> __Marshaller_authzed_api_v1_ExperimentalDependentRelationsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Authzed.Api.V1.ExperimentalDependentRelationsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Authzed.Api.V1.ExperimentalDependentRelationsResponse> __Marshaller_authzed_api_v1_ExperimentalDependentRelationsResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Authzed.Api.V1.ExperimentalDependentRelationsResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Authzed.Api.V1.ExperimentalDiffSchemaRequest> __Marshaller_authzed_api_v1_ExperimentalDiffSchemaRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Authzed.Api.V1.ExperimentalDiffSchemaRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Authzed.Api.V1.ExperimentalDiffSchemaResponse> __Marshaller_authzed_api_v1_ExperimentalDiffSchemaResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Authzed.Api.V1.ExperimentalDiffSchemaResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Authzed.Api.V1.ExperimentalRegisterRelationshipCounterRequest> __Marshaller_authzed_api_v1_ExperimentalRegisterRelationshipCounterRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Authzed.Api.V1.ExperimentalRegisterRelationshipCounterRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Authzed.Api.V1.ExperimentalRegisterRelationshipCounterResponse> __Marshaller_authzed_api_v1_ExperimentalRegisterRelationshipCounterResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Authzed.Api.V1.ExperimentalRegisterRelationshipCounterResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Authzed.Api.V1.ExperimentalCountRelationshipsRequest> __Marshaller_authzed_api_v1_ExperimentalCountRelationshipsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Authzed.Api.V1.ExperimentalCountRelationshipsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Authzed.Api.V1.ExperimentalCountRelationshipsResponse> __Marshaller_authzed_api_v1_ExperimentalCountRelationshipsResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Authzed.Api.V1.ExperimentalCountRelationshipsResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Authzed.Api.V1.ExperimentalUnregisterRelationshipCounterRequest> __Marshaller_authzed_api_v1_ExperimentalUnregisterRelationshipCounterRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Authzed.Api.V1.ExperimentalUnregisterRelationshipCounterRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Authzed.Api.V1.ExperimentalUnregisterRelationshipCounterResponse> __Marshaller_authzed_api_v1_ExperimentalUnregisterRelationshipCounterResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Authzed.Api.V1.ExperimentalUnregisterRelationshipCounterResponse.Parser));

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Authzed.Api.V1.BulkImportRelationshipsRequest, global::Authzed.Api.V1.BulkImportRelationshipsResponse> __Method_BulkImportRelationships = new grpc::Method<global::Authzed.Api.V1.BulkImportRelationshipsRequest, global::Authzed.Api.V1.BulkImportRelationshipsResponse>(
        grpc::MethodType.ClientStreaming,
        __ServiceName,
        "BulkImportRelationships",
        __Marshaller_authzed_api_v1_BulkImportRelationshipsRequest,
        __Marshaller_authzed_api_v1_BulkImportRelationshipsResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Authzed.Api.V1.BulkExportRelationshipsRequest, global::Authzed.Api.V1.BulkExportRelationshipsResponse> __Method_BulkExportRelationships = new grpc::Method<global::Authzed.Api.V1.BulkExportRelationshipsRequest, global::Authzed.Api.V1.BulkExportRelationshipsResponse>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "BulkExportRelationships",
        __Marshaller_authzed_api_v1_BulkExportRelationshipsRequest,
        __Marshaller_authzed_api_v1_BulkExportRelationshipsResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Authzed.Api.V1.BulkCheckPermissionRequest, global::Authzed.Api.V1.BulkCheckPermissionResponse> __Method_BulkCheckPermission = new grpc::Method<global::Authzed.Api.V1.BulkCheckPermissionRequest, global::Authzed.Api.V1.BulkCheckPermissionResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "BulkCheckPermission",
        __Marshaller_authzed_api_v1_BulkCheckPermissionRequest,
        __Marshaller_authzed_api_v1_BulkCheckPermissionResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Authzed.Api.V1.ExperimentalReflectSchemaRequest, global::Authzed.Api.V1.ExperimentalReflectSchemaResponse> __Method_ExperimentalReflectSchema = new grpc::Method<global::Authzed.Api.V1.ExperimentalReflectSchemaRequest, global::Authzed.Api.V1.ExperimentalReflectSchemaResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ExperimentalReflectSchema",
        __Marshaller_authzed_api_v1_ExperimentalReflectSchemaRequest,
        __Marshaller_authzed_api_v1_ExperimentalReflectSchemaResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Authzed.Api.V1.ExperimentalComputablePermissionsRequest, global::Authzed.Api.V1.ExperimentalComputablePermissionsResponse> __Method_ExperimentalComputablePermissions = new grpc::Method<global::Authzed.Api.V1.ExperimentalComputablePermissionsRequest, global::Authzed.Api.V1.ExperimentalComputablePermissionsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ExperimentalComputablePermissions",
        __Marshaller_authzed_api_v1_ExperimentalComputablePermissionsRequest,
        __Marshaller_authzed_api_v1_ExperimentalComputablePermissionsResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Authzed.Api.V1.ExperimentalDependentRelationsRequest, global::Authzed.Api.V1.ExperimentalDependentRelationsResponse> __Method_ExperimentalDependentRelations = new grpc::Method<global::Authzed.Api.V1.ExperimentalDependentRelationsRequest, global::Authzed.Api.V1.ExperimentalDependentRelationsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ExperimentalDependentRelations",
        __Marshaller_authzed_api_v1_ExperimentalDependentRelationsRequest,
        __Marshaller_authzed_api_v1_ExperimentalDependentRelationsResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Authzed.Api.V1.ExperimentalDiffSchemaRequest, global::Authzed.Api.V1.ExperimentalDiffSchemaResponse> __Method_ExperimentalDiffSchema = new grpc::Method<global::Authzed.Api.V1.ExperimentalDiffSchemaRequest, global::Authzed.Api.V1.ExperimentalDiffSchemaResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ExperimentalDiffSchema",
        __Marshaller_authzed_api_v1_ExperimentalDiffSchemaRequest,
        __Marshaller_authzed_api_v1_ExperimentalDiffSchemaResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Authzed.Api.V1.ExperimentalRegisterRelationshipCounterRequest, global::Authzed.Api.V1.ExperimentalRegisterRelationshipCounterResponse> __Method_ExperimentalRegisterRelationshipCounter = new grpc::Method<global::Authzed.Api.V1.ExperimentalRegisterRelationshipCounterRequest, global::Authzed.Api.V1.ExperimentalRegisterRelationshipCounterResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ExperimentalRegisterRelationshipCounter",
        __Marshaller_authzed_api_v1_ExperimentalRegisterRelationshipCounterRequest,
        __Marshaller_authzed_api_v1_ExperimentalRegisterRelationshipCounterResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Authzed.Api.V1.ExperimentalCountRelationshipsRequest, global::Authzed.Api.V1.ExperimentalCountRelationshipsResponse> __Method_ExperimentalCountRelationships = new grpc::Method<global::Authzed.Api.V1.ExperimentalCountRelationshipsRequest, global::Authzed.Api.V1.ExperimentalCountRelationshipsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ExperimentalCountRelationships",
        __Marshaller_authzed_api_v1_ExperimentalCountRelationshipsRequest,
        __Marshaller_authzed_api_v1_ExperimentalCountRelationshipsResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Authzed.Api.V1.ExperimentalUnregisterRelationshipCounterRequest, global::Authzed.Api.V1.ExperimentalUnregisterRelationshipCounterResponse> __Method_ExperimentalUnregisterRelationshipCounter = new grpc::Method<global::Authzed.Api.V1.ExperimentalUnregisterRelationshipCounterRequest, global::Authzed.Api.V1.ExperimentalUnregisterRelationshipCounterResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ExperimentalUnregisterRelationshipCounter",
        __Marshaller_authzed_api_v1_ExperimentalUnregisterRelationshipCounterRequest,
        __Marshaller_authzed_api_v1_ExperimentalUnregisterRelationshipCounterResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Authzed.Api.V1.ExperimentalServiceReflection.Descriptor.Services[0]; }
    }

    /// <summary>Client for ExperimentalService</summary>
    public partial class ExperimentalServiceClient : grpc::ClientBase<ExperimentalServiceClient>
    {
      /// <summary>Creates a new client for ExperimentalService</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public ExperimentalServiceClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for ExperimentalService that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public ExperimentalServiceClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected ExperimentalServiceClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected ExperimentalServiceClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// BulkImportRelationships is a faster path to writing a large number of
      /// relationships at once. It is both batched and streaming. For maximum
      /// performance, the caller should attempt to write relationships in as close
      /// to relationship sort order as possible: (resource.object_type,
      /// resource.object_id, relation, subject.object.object_type,
      /// subject.object.object_id, subject.optional_relation)
      /// 
      /// EXPERIMENTAL
      /// https://github.com/authzed/spicedb/issues/1303
      /// </summary>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncClientStreamingCall<global::Authzed.Api.V1.BulkImportRelationshipsRequest, global::Authzed.Api.V1.BulkImportRelationshipsResponse> BulkImportRelationships(grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return BulkImportRelationships(new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// BulkImportRelationships is a faster path to writing a large number of
      /// relationships at once. It is both batched and streaming. For maximum
      /// performance, the caller should attempt to write relationships in as close
      /// to relationship sort order as possible: (resource.object_type,
      /// resource.object_id, relation, subject.object.object_type,
      /// subject.object.object_id, subject.optional_relation)
      /// 
      /// EXPERIMENTAL
      /// https://github.com/authzed/spicedb/issues/1303
      /// </summary>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncClientStreamingCall<global::Authzed.Api.V1.BulkImportRelationshipsRequest, global::Authzed.Api.V1.BulkImportRelationshipsResponse> BulkImportRelationships(grpc::CallOptions options)
      {
        return CallInvoker.AsyncClientStreamingCall(__Method_BulkImportRelationships, null, options);
      }
      /// <summary>
      /// BulkExportRelationships is the fastest path available to exporting
      /// relationships from the server. It is resumable, and will return results
      /// in an order determined by the server.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncServerStreamingCall<global::Authzed.Api.V1.BulkExportRelationshipsResponse> BulkExportRelationships(global::Authzed.Api.V1.BulkExportRelationshipsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return BulkExportRelationships(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// BulkExportRelationships is the fastest path available to exporting
      /// relationships from the server. It is resumable, and will return results
      /// in an order determined by the server.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncServerStreamingCall<global::Authzed.Api.V1.BulkExportRelationshipsResponse> BulkExportRelationships(global::Authzed.Api.V1.BulkExportRelationshipsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_BulkExportRelationships, null, options, request);
      }
      /// <summary>
      /// NOTE: BulkCheckPermission has been promoted to the stable API as "CheckBulkPermission" and the
      /// API will be removed from experimental in a future release.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.ObsoleteAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Authzed.Api.V1.BulkCheckPermissionResponse BulkCheckPermission(global::Authzed.Api.V1.BulkCheckPermissionRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return BulkCheckPermission(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// NOTE: BulkCheckPermission has been promoted to the stable API as "CheckBulkPermission" and the
      /// API will be removed from experimental in a future release.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.ObsoleteAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Authzed.Api.V1.BulkCheckPermissionResponse BulkCheckPermission(global::Authzed.Api.V1.BulkCheckPermissionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_BulkCheckPermission, null, options, request);
      }
      /// <summary>
      /// NOTE: BulkCheckPermission has been promoted to the stable API as "CheckBulkPermission" and the
      /// API will be removed from experimental in a future release.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.ObsoleteAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Authzed.Api.V1.BulkCheckPermissionResponse> BulkCheckPermissionAsync(global::Authzed.Api.V1.BulkCheckPermissionRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return BulkCheckPermissionAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// NOTE: BulkCheckPermission has been promoted to the stable API as "CheckBulkPermission" and the
      /// API will be removed from experimental in a future release.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.ObsoleteAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Authzed.Api.V1.BulkCheckPermissionResponse> BulkCheckPermissionAsync(global::Authzed.Api.V1.BulkCheckPermissionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_BulkCheckPermission, null, options, request);
      }
      /// <summary>
      /// EXPERIMENTAL: ReflectSchema is an API that allows clients to reflect the schema stored in
      /// SpiceDB. This is useful for clients that need to introspect the schema of a SpiceDB instance.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Authzed.Api.V1.ExperimentalReflectSchemaResponse ExperimentalReflectSchema(global::Authzed.Api.V1.ExperimentalReflectSchemaRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ExperimentalReflectSchema(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// EXPERIMENTAL: ReflectSchema is an API that allows clients to reflect the schema stored in
      /// SpiceDB. This is useful for clients that need to introspect the schema of a SpiceDB instance.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Authzed.Api.V1.ExperimentalReflectSchemaResponse ExperimentalReflectSchema(global::Authzed.Api.V1.ExperimentalReflectSchemaRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ExperimentalReflectSchema, null, options, request);
      }
      /// <summary>
      /// EXPERIMENTAL: ReflectSchema is an API that allows clients to reflect the schema stored in
      /// SpiceDB. This is useful for clients that need to introspect the schema of a SpiceDB instance.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Authzed.Api.V1.ExperimentalReflectSchemaResponse> ExperimentalReflectSchemaAsync(global::Authzed.Api.V1.ExperimentalReflectSchemaRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ExperimentalReflectSchemaAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// EXPERIMENTAL: ReflectSchema is an API that allows clients to reflect the schema stored in
      /// SpiceDB. This is useful for clients that need to introspect the schema of a SpiceDB instance.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Authzed.Api.V1.ExperimentalReflectSchemaResponse> ExperimentalReflectSchemaAsync(global::Authzed.Api.V1.ExperimentalReflectSchemaRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ExperimentalReflectSchema, null, options, request);
      }
      /// <summary>
      /// EXPERIMENTAL: ComputablePermissions is an API that allows clients to request the set of
      /// permissions that compute based off a relation. For example, if a schema has a relation
      /// `viewer` and a permission `view` defined as `permission view = viewer + editor`, then the
      /// computable permissions for the relation `viewer` will include `view`.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Authzed.Api.V1.ExperimentalComputablePermissionsResponse ExperimentalComputablePermissions(global::Authzed.Api.V1.ExperimentalComputablePermissionsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ExperimentalComputablePermissions(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// EXPERIMENTAL: ComputablePermissions is an API that allows clients to request the set of
      /// permissions that compute based off a relation. For example, if a schema has a relation
      /// `viewer` and a permission `view` defined as `permission view = viewer + editor`, then the
      /// computable permissions for the relation `viewer` will include `view`.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Authzed.Api.V1.ExperimentalComputablePermissionsResponse ExperimentalComputablePermissions(global::Authzed.Api.V1.ExperimentalComputablePermissionsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ExperimentalComputablePermissions, null, options, request);
      }
      /// <summary>
      /// EXPERIMENTAL: ComputablePermissions is an API that allows clients to request the set of
      /// permissions that compute based off a relation. For example, if a schema has a relation
      /// `viewer` and a permission `view` defined as `permission view = viewer + editor`, then the
      /// computable permissions for the relation `viewer` will include `view`.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Authzed.Api.V1.ExperimentalComputablePermissionsResponse> ExperimentalComputablePermissionsAsync(global::Authzed.Api.V1.ExperimentalComputablePermissionsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ExperimentalComputablePermissionsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// EXPERIMENTAL: ComputablePermissions is an API that allows clients to request the set of
      /// permissions that compute based off a relation. For example, if a schema has a relation
      /// `viewer` and a permission `view` defined as `permission view = viewer + editor`, then the
      /// computable permissions for the relation `viewer` will include `view`.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Authzed.Api.V1.ExperimentalComputablePermissionsResponse> ExperimentalComputablePermissionsAsync(global::Authzed.Api.V1.ExperimentalComputablePermissionsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ExperimentalComputablePermissions, null, options, request);
      }
      /// <summary>
      /// EXPERIMENTAL: DependentRelations is an API that allows clients to request the set of
      /// relations and permissions that used to compute a permission, recursively. It is the
      /// inverse of the ComputablePermissions API.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Authzed.Api.V1.ExperimentalDependentRelationsResponse ExperimentalDependentRelations(global::Authzed.Api.V1.ExperimentalDependentRelationsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ExperimentalDependentRelations(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// EXPERIMENTAL: DependentRelations is an API that allows clients to request the set of
      /// relations and permissions that used to compute a permission, recursively. It is the
      /// inverse of the ComputablePermissions API.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Authzed.Api.V1.ExperimentalDependentRelationsResponse ExperimentalDependentRelations(global::Authzed.Api.V1.ExperimentalDependentRelationsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ExperimentalDependentRelations, null, options, request);
      }
      /// <summary>
      /// EXPERIMENTAL: DependentRelations is an API that allows clients to request the set of
      /// relations and permissions that used to compute a permission, recursively. It is the
      /// inverse of the ComputablePermissions API.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Authzed.Api.V1.ExperimentalDependentRelationsResponse> ExperimentalDependentRelationsAsync(global::Authzed.Api.V1.ExperimentalDependentRelationsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ExperimentalDependentRelationsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// EXPERIMENTAL: DependentRelations is an API that allows clients to request the set of
      /// relations and permissions that used to compute a permission, recursively. It is the
      /// inverse of the ComputablePermissions API.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Authzed.Api.V1.ExperimentalDependentRelationsResponse> ExperimentalDependentRelationsAsync(global::Authzed.Api.V1.ExperimentalDependentRelationsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ExperimentalDependentRelations, null, options, request);
      }
      /// <summary>
      /// EXPERIMENTAL: DiffSchema is an API that allows clients to request the difference between the
      /// specified schema and the schema stored in SpiceDB. This is useful for clients that need to
      /// introspect the schema of a SpiceDB instance.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Authzed.Api.V1.ExperimentalDiffSchemaResponse ExperimentalDiffSchema(global::Authzed.Api.V1.ExperimentalDiffSchemaRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ExperimentalDiffSchema(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// EXPERIMENTAL: DiffSchema is an API that allows clients to request the difference between the
      /// specified schema and the schema stored in SpiceDB. This is useful for clients that need to
      /// introspect the schema of a SpiceDB instance.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Authzed.Api.V1.ExperimentalDiffSchemaResponse ExperimentalDiffSchema(global::Authzed.Api.V1.ExperimentalDiffSchemaRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ExperimentalDiffSchema, null, options, request);
      }
      /// <summary>
      /// EXPERIMENTAL: DiffSchema is an API that allows clients to request the difference between the
      /// specified schema and the schema stored in SpiceDB. This is useful for clients that need to
      /// introspect the schema of a SpiceDB instance.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Authzed.Api.V1.ExperimentalDiffSchemaResponse> ExperimentalDiffSchemaAsync(global::Authzed.Api.V1.ExperimentalDiffSchemaRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ExperimentalDiffSchemaAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// EXPERIMENTAL: DiffSchema is an API that allows clients to request the difference between the
      /// specified schema and the schema stored in SpiceDB. This is useful for clients that need to
      /// introspect the schema of a SpiceDB instance.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Authzed.Api.V1.ExperimentalDiffSchemaResponse> ExperimentalDiffSchemaAsync(global::Authzed.Api.V1.ExperimentalDiffSchemaRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ExperimentalDiffSchema, null, options, request);
      }
      /// <summary>
      /// EXPERIMENTAL: RegisterRelationshipCounter registers a new filter for counting relationships. A filter must be registered before
      /// a count can be requested.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Authzed.Api.V1.ExperimentalRegisterRelationshipCounterResponse ExperimentalRegisterRelationshipCounter(global::Authzed.Api.V1.ExperimentalRegisterRelationshipCounterRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ExperimentalRegisterRelationshipCounter(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// EXPERIMENTAL: RegisterRelationshipCounter registers a new filter for counting relationships. A filter must be registered before
      /// a count can be requested.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Authzed.Api.V1.ExperimentalRegisterRelationshipCounterResponse ExperimentalRegisterRelationshipCounter(global::Authzed.Api.V1.ExperimentalRegisterRelationshipCounterRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ExperimentalRegisterRelationshipCounter, null, options, request);
      }
      /// <summary>
      /// EXPERIMENTAL: RegisterRelationshipCounter registers a new filter for counting relationships. A filter must be registered before
      /// a count can be requested.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Authzed.Api.V1.ExperimentalRegisterRelationshipCounterResponse> ExperimentalRegisterRelationshipCounterAsync(global::Authzed.Api.V1.ExperimentalRegisterRelationshipCounterRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ExperimentalRegisterRelationshipCounterAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// EXPERIMENTAL: RegisterRelationshipCounter registers a new filter for counting relationships. A filter must be registered before
      /// a count can be requested.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Authzed.Api.V1.ExperimentalRegisterRelationshipCounterResponse> ExperimentalRegisterRelationshipCounterAsync(global::Authzed.Api.V1.ExperimentalRegisterRelationshipCounterRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ExperimentalRegisterRelationshipCounter, null, options, request);
      }
      /// <summary>
      /// EXPERIMENTAL: CountRelationships returns the count of relationships for *pre-registered* filter.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Authzed.Api.V1.ExperimentalCountRelationshipsResponse ExperimentalCountRelationships(global::Authzed.Api.V1.ExperimentalCountRelationshipsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ExperimentalCountRelationships(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// EXPERIMENTAL: CountRelationships returns the count of relationships for *pre-registered* filter.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Authzed.Api.V1.ExperimentalCountRelationshipsResponse ExperimentalCountRelationships(global::Authzed.Api.V1.ExperimentalCountRelationshipsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ExperimentalCountRelationships, null, options, request);
      }
      /// <summary>
      /// EXPERIMENTAL: CountRelationships returns the count of relationships for *pre-registered* filter.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Authzed.Api.V1.ExperimentalCountRelationshipsResponse> ExperimentalCountRelationshipsAsync(global::Authzed.Api.V1.ExperimentalCountRelationshipsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ExperimentalCountRelationshipsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// EXPERIMENTAL: CountRelationships returns the count of relationships for *pre-registered* filter.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Authzed.Api.V1.ExperimentalCountRelationshipsResponse> ExperimentalCountRelationshipsAsync(global::Authzed.Api.V1.ExperimentalCountRelationshipsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ExperimentalCountRelationships, null, options, request);
      }
      /// <summary>
      /// EXPERIMENTAL: UnregisterRelationshipCounter unregisters an existing filter for counting relationships.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Authzed.Api.V1.ExperimentalUnregisterRelationshipCounterResponse ExperimentalUnregisterRelationshipCounter(global::Authzed.Api.V1.ExperimentalUnregisterRelationshipCounterRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ExperimentalUnregisterRelationshipCounter(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// EXPERIMENTAL: UnregisterRelationshipCounter unregisters an existing filter for counting relationships.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Authzed.Api.V1.ExperimentalUnregisterRelationshipCounterResponse ExperimentalUnregisterRelationshipCounter(global::Authzed.Api.V1.ExperimentalUnregisterRelationshipCounterRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ExperimentalUnregisterRelationshipCounter, null, options, request);
      }
      /// <summary>
      /// EXPERIMENTAL: UnregisterRelationshipCounter unregisters an existing filter for counting relationships.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Authzed.Api.V1.ExperimentalUnregisterRelationshipCounterResponse> ExperimentalUnregisterRelationshipCounterAsync(global::Authzed.Api.V1.ExperimentalUnregisterRelationshipCounterRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ExperimentalUnregisterRelationshipCounterAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// EXPERIMENTAL: UnregisterRelationshipCounter unregisters an existing filter for counting relationships.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Authzed.Api.V1.ExperimentalUnregisterRelationshipCounterResponse> ExperimentalUnregisterRelationshipCounterAsync(global::Authzed.Api.V1.ExperimentalUnregisterRelationshipCounterRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ExperimentalUnregisterRelationshipCounter, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected override ExperimentalServiceClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new ExperimentalServiceClient(configuration);
      }
    }

  }
}
#endregion
